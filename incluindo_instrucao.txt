// Definir o Codigo da Instrucao: defs.h
#define POW2_CODE      99
// Definir os Bits da Instrucao: 
#define POW2           "110011"
// Definir a String de como a Instrucao deve aparecer no programa ASM:
#define POW2_STR       "POW2"


montador.c

// 1) Definir os separadores da Instrucao e quantas linhas do EXE (mif) ela necessita:
        /* Instrucoes de 1 argumento e 1 linha : instr (), () -> [...] */
		
     -> case POW2_CODE:
        case INCHAR_CODE :
        case INC_CODE :
        case DEC_CODE :
			
			
// 2) Explicar como o Montador vai montar os BITs da Instrucao e escrever no arquivo:
        case POW2_CODE : // Sqrt R1, R2
            str_tmp1 = parser_GetItem_s();
            val1 = BuscaRegistrador(str_tmp1);
            free(str_tmp1);
            parser_Match(',');
            str_tmp2 = parser_GetItem_s();
            val2 = BuscaRegistrador(str_tmp2);
            free(str_tmp2);
            str_tmp1 = ConverteRegistrador(val1);
            str_tmp2 = ConverteRegistrador(val2);
            sprintf(str_msg,"%s%s%20000",POW2,str_tmp1,str_tmp2);
            free(str_tmp1);
            free(str_tmp2);
            parser_Write_Inst(str_msg,end_cnt);
            end_cnt +=1;
            break;
			
			
// 3) Buscar o nome da instrucao na base de instrucoes e retornar 'op_code interno' da instrucao:
      if (strcmp(str_tmp,POW2_STR) == 0)
        {
            return POW2_CODE;
        }